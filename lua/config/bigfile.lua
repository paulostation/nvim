-- vim.api.nvim_create_autocmd("BufReadPre", {
--   callback = function(args)
--     local ok, stats = pcall(vim.uv.fs_stat, args.file)
--     local file_size = (stats and stats.size) or 0
--
--     if file_size > 100 * 1024 * 1024 then  -- 100MB
--       -- Ask the user if they want to proceed
--       local answer = vim.fn.input("‚ö†Ô∏è  File is over 100MB. Continue loading? [y/N]: ")
--       if answer:lower() ~= "y" then
--         -- Instead of opening the file, redirect to a dummy buffer
--         vim.api.nvim_command("enew")  -- Open empty buffer
--         vim.api.nvim_buf_set_lines(0, 0, -1, false, { "üö´ File skipped due to size." })
--         vim.bo.bufhidden = "wipe"
--         vim.cmd.bwipeout(args.buf)  -- Clean up the original buffer before it's loaded
--         return
--       end
--     end
--
--     -- Check also for medium files
--     local line_count = tonumber(vim.fn.system("wc -l < " .. vim.fn.shellescape(args.file))) or 0
--     if file_size > 2 * 1024 * 1024 or line_count > 10000 then
--       vim.b.bigfile = true
--
--       vim.cmd("syntax off")
--       vim.cmd("filetype off")
--       vim.cmd("setlocal noswapfile noundofile nobackup")
--       vim.cmd("setlocal nospell nowrap nonumber norelativenumber")
--
--       pcall(vim.treesitter.stop)
--
--       -- Stop LSPs manually
--       for _, client in pairs(vim.lsp.get_active_clients({ bufnr = args.buf })) do
--         client.stop()
--       end
--
--       vim.notify("üö´ Big file detected ‚Äî disabling slow plugins!", vim.log.levels.WARN)
--     end
--   end,
-- })
--
